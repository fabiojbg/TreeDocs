@*@layout NotesLayout*@
@inherits BaseLoggedPage
@page "/UserNotesExperimental"
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Buttons
@using Blazored.TextEditor
@using TreeDocs.Domain.RequestsResponses
@using TreeDocs.ClientApp.Model
@inject AppState AppState

<SfSpinner @ref="Spinner" Type="SpinnerType.Material">
</SfSpinner>

<SfSplitter ID="DocSplitter" Width="100%" Height="100%" SeparatorSize="3" EnablePersistence="true">
    <SplitterPanes>
        <SplitterPane Size="20%" Min="250px">
            <ContentTemplate>
                <div class="splitter-content">
                    <TreeNotes @ref="treeNotes" OnNodeChanging="OnNodeChanging" OnNodeChanged="OnNodeChanged"></TreeNotes>
                    @*<UserTreeNotes></UserTreeNotes>*@
                </div>
            </ContentTemplate>
        </SplitterPane>
        <SplitterPane>
            <ContentTemplate>
                    <BlazoredTextEditor @ref="@rtfEditor">
                        <ToolbarContent>
                            <select class="ql-font">
                            </select>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <select class="ql-size">
                            </select>
                            <select class="ql-align"></select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-blockquote"></button>
                                <button class="ql-code-block"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                                <button class="ql-image"></button>
                                <button class="ql-video"></button>
                                @*<button class="ql-formula"></button>*@
                            </span>
                            <span class="ql-formats">
                                <button class="ql-clean"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                        </EditorContent>
                    </BlazoredTextEditor>
            </ContentTemplate>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>
<style>
    .ql-container {
        height: 85%;
    }
</style>

@code
{
    BlazoredTextEditor rtfEditor;
    TreeNotes treeNotes;
    string rtfEditorContents;
    string originalNodeContents;
    string currentNodeId;
    static bool isSavingNode;


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected async Task OnNodeChanging(NodeChangingEvent args)
    {
        args.Cancel = isSavingNode;
    }

    protected async Task OnNodeChanged(NodeChangedEvent args)
    {
        if (isSavingNode) return;
        isSavingNode = true;
        try
        {
            rtfEditorContents = await rtfEditor.GetHTML();
            if (!args.PreviousNodeId.IsNullOrEmpty() && originalNodeContents?.Equals(rtfEditorContents) != true)
            {
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Updating Node");
                var success = await updateNodeContents(args.PreviousNodeId, rtfEditorContents ?? "");
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Node saved");
                if (!success)
                {
                    //treeNotes.SetSelectedNode(args.PreviousNodeId);
                    //    args.Cancel = true;
                    return;
                }
                //rtfEditor.Height = "100%";
            }
            if (!args.NewNodeId.IsNullOrEmpty())
            {
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Getting node contents");
                rtfEditorContents = await getNodeContents(args.NewNodeId);
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Node contents retrieved");
                originalNodeContents = rtfEditorContents.ToString();
                await rtfEditor.LoadHTMLContent(rtfEditorContents);
                currentNodeId = args.NewNodeId;
                //rtfEditor.Height = "100%";
            }
        }
        finally
        {
            isSavingNode = false;
        }
    }

    protected async Task saveCurrentNote()
    {
        //rtfEditorContents = rtfEditor.Value;
        if (!currentNodeId.IsNullOrEmpty())
        {
            rtfEditorContents = await rtfEditor.GetHTML();
            await updateNodeContents(currentNodeId, rtfEditorContents ?? "");
            originalNodeContents = rtfEditorContents ?? "";
        }
    }

    protected async Task<bool> updateNodeContents(string nodeId, string newContents)
    {
        var updateNodeRequest = new UpdateUserNodeDataRequest { NodeId = nodeId, NodeContents = newContents };

        var response = await ExecPutRequest<UpdateUserNodeDataResponse>($"{ServerUrl}/api/v1/nodes", updateNodeRequest, "Saving note...");

        return response != null;
    }

    protected async Task<string> getNodeContents(string nodeId)
    {
        var response = await ExecGetRequest<GetUserNodeResponse>($"{ServerUrl}/api/v1/nodes/{nodeId}", "Reading selected note...");

        return response?.Node?.Contents ?? "";
    }

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
