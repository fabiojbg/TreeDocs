@inherits BaseLoggedPage
@page "/UserNotes"
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using TreeDocs.Domain.RequestsResponses
@using TreeDocs.ClientApp.Model
@inject AppState AppState

<SfSpinner @ref="Spinner" Type="SpinnerType.Material">
</SfSpinner>

<SfSplitter ID="DocSplitter" Width="100%" Height="100%" SeparatorSize="3" EnablePersistence="true">
    <SplitterPanes>
        <SplitterPane Size="20%" Min="250px">
            <ContentTemplate>
                <div class="splitter-content">
                    <TreeNotes @ref="treeNotes" OnNodeChanging="OnNodeChanging" OnNodeChanged="OnNodeChanged"></TreeNotes>
                    @*<UserTreeNotes></UserTreeNotes>*@
                </div>
            </ContentTemplate>
        </SplitterPane>
        <SplitterPane>
            <ContentTemplate>
                <div class="splitter-content" style="height:100%">
                    <SfRichTextEditor @ref="rtfEditor" @bind-Value="@rtfEditorContents" Height="100%" 
                                      SaveInterval="200" ShowCharCount="true" 
                                      MaxLength="1000000" Placeholder="Type something"> 
                        <RichTextEditorToolbarSettings Items="@_toolBar" Type="ToolbarType.MultiRow" >
                            <RichTextEditorCustomToolbarItems>
                                <RichTextEditorCustomToolbarItem Name="Save">
                                    <Template>
                                        <SfButton @onclick="saveCurrentNote" IconCss="fas fa-save"></SfButton>
                                    </Template>
                                </RichTextEditorCustomToolbarItem>
                            </RichTextEditorCustomToolbarItems>
                        </RichTextEditorToolbarSettings>
                        <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64" Display="ImageDisplay.Inline"></RichTextEditorImageSettings>
                    </SfRichTextEditor>
                </div>
            </ContentTemplate>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

@*<div class="sidebar" style="height:1000px">
    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">Noter</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu" style="height:1000px">
        <ul class="nav flex-column">
            <TreeNotes OnNodeChanging="OnNodeChanging" OnNodeChanged="OnNodeChanged"></TreeNotes>
         </ul>
    </div>
</div>
<div class="main">
    <div class="content px-4" style="height:90%">
        <SfRichTextEditor @ref="rtfEditor" Value="@rtfEditorContents" Height="100%" ShowCharCount="true" MaxLength="1000000">
            <RichTextEditorToolbarSettings Items="@_toolBar" Type="ToolbarType.MultiRow" />
            <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64" Display="ImageDisplay.Inline"></RichTextEditorImageSettings>
        </SfRichTextEditor>
    </div>
</div>*@

<style>
    .e-richtexteditor .e-rte-content .e-content p,
    .e-richtexteditor .e-source-content .e-content p {
        margin: 0 0 0;
        margin-bottom: 0;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item:not(.e-separator) {
        padding: 0 0;
    }

    .e-richtexteditor .e-rte-toolbar .e-toolbar-items:not(.e-tbar-pos) .e-toolbar-item:first-child {
        margin-left: 0;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn .e-icons.e-btn-icon {
        min-width: 0;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item:not(.e-separator) {
        height: 100%;
        min-width: 20px; 
        padding: 0px 0px;
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn {
        height: calc(100% - 10px);
        margin: 0;
        min-height: 32px;
        min-width: 20px;
        padding: 0 3px;
        line-height: 27px;
    }

</style>

@code
{
    SfRichTextEditor rtfEditor;
    TreeNotes treeNotes;
    string rtfEditorContents;
    string originalNodeContents;
    string currentNodeId;
    static bool isSavingNode;


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected async Task OnNodeChanging(NodeChangingEvent args)
    {
        args.Cancel = isSavingNode;
    }

    protected async Task OnNodeChanged(NodeChangedEvent args)
    {
        if (isSavingNode) return;
        isSavingNode = true;
        try
        {
            //rtfEditorContents = rtfEditor.Value;
            if (!args.PreviousNodeId.IsNullOrEmpty() && originalNodeContents?.Equals(rtfEditor.Value) != true)
            {
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Updating Node");
                var success = await updateNodeContents(args.PreviousNodeId, rtfEditor.Value ?? "");
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Node saved");
                if (!success)
                {
                    //treeNotes.SetSelectedNode(args.PreviousNodeId);
                    //    args.Cancel = true;
                    return;
                }
                //rtfEditor.Height = "100%";
            }
            if (!args.NewNodeId.IsNullOrEmpty())
            {
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Getting node contents");
                rtfEditorContents = await getNodeContents(args.NewNodeId);
                //Console.WriteLine(DateTime.Now.ToString("HH:mm:ss:ff") + ". Node contents retrieved");
                originalNodeContents = rtfEditorContents.ToString();
                currentNodeId = args.NewNodeId;
                rtfEditor.Height = "100%";
            }
        }
        finally
        {
            isSavingNode = false;
        }
    }

    protected async Task saveCurrentNote()
    {
        //rtfEditorContents = rtfEditor.Value;
        if ( !currentNodeId.IsNullOrEmpty())
        {
            await updateNodeContents(currentNodeId, rtfEditor.Value ?? "");
            originalNodeContents = rtfEditor.Value ?? "";
        }
    }

    protected async Task<bool> updateNodeContents(string nodeId, string newContents)
    {
        var updateNodeRequest = new UpdateUserNodeDataRequest { NodeId = nodeId, NodeContents = newContents };

        var response = await ExecPutRequest<UpdateUserNodeDataResponse>($"{ServerUrl}/api/v1/nodes", updateNodeRequest, "Saving note...");

        return response != null;
    }

    protected async Task<string> getNodeContents(string nodeId)
    {
        var response = await ExecGetRequest<GetUserNodeResponse>($"{ServerUrl}/api/v1/nodes/{nodeId}", "Reading selected note...");

        return response?.Node?.Contents ?? "";
    }


    private List<ToolbarItemModel> _toolBar = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Name = "Save", TooltipText = "Save" },
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.RemoveLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.HorizontalSeparator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.InsertCode },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
