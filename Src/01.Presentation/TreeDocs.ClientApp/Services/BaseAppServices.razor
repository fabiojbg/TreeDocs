@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject AppState AppState
@inject Blazored.LocalStorage.ILocalStorageService BrowserLocalStorage
@inject NavigationManager NavManager
@inject INotifier notifier
@inject HttpClient Http;
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment hostEnv

@code {
    public Blazored.LocalStorage.ILocalStorageService LocalStorage => BrowserLocalStorage;
    public AuthenticatedUser LoggedUser => AppState?.AuthenticatedUser;
    protected INotifier Notifier => notifier;
    protected SfSpinner Spinner;

    protected string ServerUrl
    {
        get
        {
            if( hostEnv.IsDevelopment())
                return Configuration["Development:Server"];

            if (hostEnv.IsStaging())
                return Configuration["Staging:Server"];

            return Configuration["Prod:Server"];
        }
    }

    protected void LogoutUser()
    {
        AppState.SetAuthenticatedUser(null);
        NavManager.NavigateTo("/Login");
    }

    protected async Task<TResponse> ExecPostRequest<TResponse>(string url, object requestData, string waitText = "")
    {
        return await ExecRequest<TResponse>(HttpMethod.Post, url, requestData, waitText);
    }

    protected Task<TResponse> ExecPutRequest<TResponse>(string url, object requestData, string waitText = "")
    {
        return ExecRequest<TResponse>(HttpMethod.Put, url, requestData, waitText);
    }

    protected Task<TResponse> ExecGetRequest<TResponse>(string url, string waitText = "")
    {
        return ExecRequest<TResponse>(HttpMethod.Get, url, null, waitText);
    }

    protected Task<TResponse> ExecDeleteRequest<TResponse>(string url, object requestData = default, string waitText = "")
    {
        return ExecRequest<TResponse>(HttpMethod.Delete, url, requestData, waitText);
    }

    protected async Task<TResponse> ExecRequest<TResponse>(HttpMethod method, string url, object requestData = default, string waitText = "")
    {
        try
        {
            if (LoggedUser?.TokenExpiration != null && LoggedUser.TokenExpiration < DateTime.UtcNow)
            {
                LogoutUser();
                return default;
            }

            if (Spinner != null)
            {
                Spinner.Label = waitText;
                Spinner.ShowAsync();
            }
            Http.SetAuthorizationHeader(LoggedUser?.Token);
            //Http.SetHeader("Accept-Encoding", "gzip");

            var request = new HttpRequestMessage(method, url);
            if (requestData != null)
                request.Content = JsonContent.Create(requestData);

            var httpResponse = await Http.SendAsync(request);
            if (!Notifier.ShowIfHasError(httpResponse))
            {
                if (httpResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    LogoutUser();
                var response = await httpResponse.Content.ReadJsonAsync<TResponse>();
                return response;
            }
        }
        catch (Exception ex)
        {
            Notifier.ShowError(ex);
        }
        finally
        {
            if (Spinner != null) Spinner.HideAsync();
        }
        return default;
    }


}
