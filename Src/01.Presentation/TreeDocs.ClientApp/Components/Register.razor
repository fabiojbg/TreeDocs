@inherits BaseAppComponent
@page "/Register"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AppState AppState
@inject INotifier notifier
@using Auth.Domain.RequestsResponses

<h3>Register User</h3>


<div class="col-xl-7 col-lg-8 col-md-10 col-sm-12">
    <SfSpinner @ref="Spinner" Type="SpinnerType.Material">
    </SfSpinner>
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" class="form-control" @bind-value="@NewUser.Name" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="text" id="email" class="form-control" @bind-value="@NewUser.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" class="form-control" @bind-value="@NewUser.Password" />
    </div>
    <div class="form-group">
        <label for="confirmedPassword">Password confirmation:</label>
        <input type="password" id="confirmedPassword" class="form-control" @bind-value="@confirmPassword" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" @onclick="RegisterUser">Register</button>
        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</div>



@code {
    CreateUserRequest NewUser = new CreateUserRequest();
    string confirmPassword;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (base.LoggedUser != null)
            NavManager.NavigateTo("/");
    }

    private async Task RegisterUser()
    {
        try
        {
            if (!NewUser.Password.Equals(confirmPassword))
            {
                notifier.ShowWarning("Password confirmation does not match");
                return;
            }

            if (notifier.ShowIfHasError(NewUser))
                return;

            await Spinner.ShowAsync();
            var httpResponse = await Http.PostAsJsonAsync($"{ServerUrl}/api/user", NewUser);
            if (!httpResponse.IsSuccessStatusCode)
            {
                var requestResult = await httpResponse.Content.ReadJsonAsync<RequestResult>();
                if (notifier.ShowIfHasError(requestResult))
                    return;
            }

            var authenticationRequest = new AuthenticateUserRequest
            {
                UserEmail = NewUser.Email,
                Password = NewUser.Password
            };

            if (notifier.ShowIfHasError(authenticationRequest))
                return;

            httpResponse = await Http.PostAsJsonAsync($"{ServerUrl}/api/user/login", authenticationRequest);
            if (httpResponse.IsSuccessStatusCode)
            {
                var authenticatedUser = await httpResponse.Content.ReadJsonAsync<AuthenticatedUser>();
                AppState.SetAuthenticatedUser(authenticatedUser);
                NavManager.NavigateTo("/NewUserWelcome");
            }
            else
            {
                var requestResult = await httpResponse.Content.ReadJsonAsync<RequestResult>();
                if (notifier.ShowIfHasError(requestResult))
                    return;
            }
        }
        catch (Exception ex)
        {
            notifier.ShowError(ex);
        }
        finally
        {
            await Spinner.HideAsync();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/Login");
    }

}
