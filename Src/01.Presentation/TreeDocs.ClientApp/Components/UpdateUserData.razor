@inherits BaseLoggedAppComponent
@page "/UserUpdate"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AppState AppState
@using Auth.Domain.RequestsResponses

<h3>Atualizar Dados</h3>

<div class="col-xl-7 col-lg-8 col-md-10 col-sm-12">
    <SfSpinner @ref="Spinner" Type="SpinnerType.Material">
    </SfSpinner>
    <div class="form-group">
        <label for="name">Nome:</label>
        <input type="text" id="name" class="form-control" @bind-value="@userData.Name" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="text" id="email" class="form-control" @bind-value="@userData.Email" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" @onclick="RegisterUser">Atualizar</button>
        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</div>



@code {
    UpdateUserDataRequest userData = new UpdateUserDataRequest();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        userData.Name = LoggedUser.Username;
        userData.Email = LoggedUser.Email;
        userData.UserId = LoggedUser.Id;
    }

    private async Task RegisterUser()
    {
        try
        {
            userData.UserId = LoggedUser?.Id;

            if (Notifier.ShowIfHasError(userData))
                return;

            await Spinner.ShowAsync();
            Http.SetAuthorizationHeader(LoggedUser?.Token);
            var httpResponse = await Http.PutAsJsonAsync($"{ServerUrl}/api/user", userData);

            if (!Notifier.ShowIfHasError(httpResponse))
            {
                var newUserData = await httpResponse.Content.ReadJsonAsync<UpdateUserDataResponse>();
                var userData = new AuthenticatedUser { Id = LoggedUser.Id,
                    Email = newUserData.Email,
                    Username = newUserData.Name,
                    Roles = newUserData.Roles.ToArray(),
                    Token = LoggedUser.Token };

                AppState.SetAuthenticatedUser(userData);

                Notifier.ShowSucess("User data updated successfully");

                NavManager.NavigateTo("/UserNotes");
            }
            else
            {
                var requestResult = await httpResponse.Content.ReadJsonAsync<RequestResult>();
                if (Notifier.ShowIfHasError(requestResult))
                    return;
            }

        }
        catch (Exception ex)
        {
            Notifier.ShowError(ex);
        }
        finally
        {
            await Spinner.HideAsync();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/UserNotes");
    }

}
